import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.charset.StandardCharsets

plugins {
    id 'idea'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}

group = 'io.github.honhimw'
version = '1.7.0.0' // API docs version plus '.x(-SNAPSHOT/RC.x)?'
description = 'Reactive meilisearch rest client powered by reactor-netty-http.'

def title = 'Meilisearch rest client for java'
def reactorVersion = '2023.0.3'
def jacksonVersion = '2.16.1'
def gsonVersion = '2.10.1'
def lombokVersion = '1.18.30'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    implementation platform("io.projectreactor:reactor-bom:${reactorVersion}")

    implementation "io.projectreactor.netty:reactor-netty-core"
    implementation "io.projectreactor.netty:reactor-netty-http"

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.slf4j:slf4j-api:2.0.12'

    compileOnly "com.google.code.gson:gson:${gsonVersion}"

    compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    compileOnly 'io.swagger.core.v3:swagger-annotations-jakarta:2.2.20'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation "com.google.code.gson:gson:${gsonVersion}"
    testCompileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.slf4j:slf4j-simple:2.0.12'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
}

processTestResources {
    def nm = new LinkedHashMap<String, String>()
    project.properties.forEach {k, v ->
        nm.put(k, v.toString())
    }
    nm.put('project.artifactId', project.name)
    def properties = loadProfileProperties()
    properties.forEach { k, v ->
        nm.put(String.valueOf(k), String.valueOf(v))
    }
    filter ReplaceTokens, beginToken: '#{', endToken: '}', tokens: nm
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/honhimW/meilisearch-rest-client")
            credentials {
                username = githubProperties().getProperty("gpr.user") as String
                password = githubProperties().getProperty("gpr.key") as String
            }
        }
        maven {
            name = "sonatype-snapshots"
            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
        maven {
            name = "sonatype-releases"
            url = uri("https://s01.oss.sonatype.org/content/repositories/releases/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
        maven {
            name = "sonatype-central-rc"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
        maven {
            name = "sonatype-central"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = sonatypeProperties().getProperty("sonatype.username") as String
                password = sonatypeProperties().getProperty("sonatype.password") as String
            }
        }
    }

    publications {
        create('gpr', MavenPublication) {
            from components.java
            pom {
                name.set(title)
                description.set(project.description)
                url.set("https://github.com/honhimW/meilisearch-rest-client")
                licenses {
                    license {
                        name.set('The Apache License, Version 2.0')
                        url.set('https://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }
                developers {
                    developer {
                        name.set('honhimw')
                        email.set('honhimw@outlook.com')
                        url.set('https://honhimW.github.io')
                    }
                }
            }
        }
    }

}

jar {
    enabled(true)
    archiveClassifier = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8.name()
    inputs.files(tasks.withType(ProcessResources))

}

test {
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setOutputLocation layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'io/github/honhimw/ms/model/*',
                    'io/github/honhimw/ms/json/ParameterizedTypeImpl.class',
                    'io/github/honhimw/ms/http/URIBuilder.class',
                    'io/github/honhimw/ms/http/URIBuilder$TokenParser.class',
                    'io/github/honhimw/ms/http/URIBuilder$ParserCursor.class',
                    'io/github/honhimw/ms/support/StringUtils.class',
                    'io/github/honhimw/ms/support/IOUtils.class',
            ])
        }))
    }
}

tasks.register('publish-snapshot') {
    version = version + '-SNAPSHOT'
    dependsOn tasks.getByPath(':publishAllPublicationsToSonatype-snapshotsRepository')
}
tasks.register('publish-rc') {
    version = version + '-RC.' + 0
    dependsOn tasks.getByPath(':publishAllPublicationsToSonatype-central-rcRepository')
}
tasks.register('publish-release') {
    dependsOn tasks.getByPath(':publishAllPublicationsToSonatype-releasesRepository')
}
tasks.register('publish-central') {
    dependsOn tasks.getByPath(':publishAllPublicationsToSonatype-centralRepository')
}

Properties loadProfileProperties() {
    def properties = new Properties()
    properties.put('meili-search.host', '127.0.0.1')
    properties.put('meili-search.port', '7700')
    properties.put('meili-search.api-key', 'MASTER_KEY')
    def file = file("profile-${findProperty('profiles.active')}.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}

Properties githubProperties() {
    def properties = new Properties()

    def file = file("github.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}

Properties sonatypeProperties() {
    def properties = new Properties()

    def file = file("sonatype.properties")
    if (file.exists()) {
        file.withInputStream { properties.load(it) }
    }
    return properties
}
